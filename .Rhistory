spamtype<-table(training$type)
plot(spamprcomp$x[,1],spamprcomp$x[,2],col = spamtype)
spamprcomp<-prcomp(log10(training[,-58])+1)
spamprcomp<-prcomp(log10((training[,-58])+1))
plot(spamprcomp$x[,1],spamprcomp$x[,2],col = spamtype)
typecolor<-((spam$type=="spam")*1+1)
plot(spamprcomp$x[,1],spamprcomp$x[,2],col = typecolor)
typecolor<-((spam$type=="spam")*1+1)
spamprcomp<-prcomp(log10((training[,-58])+1))
plot(spamprcomp$x[,1],spamprcomp$x[,2],col = typecolor)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(train)
dim(test)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(test)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength)
dim(concrete)
names(concrete)
str(concrete)
table(concrete$Cement)
str(concrete)
table(concrete$BlastFurnaceSlag)
str(concrete)
table(concrete$FlyAsh)
table(concrete$Water)
table(concrete$Superplasticizer)
table(concrete$CoarseAggregate)
table(concrete$FineAggregate)
table(concrete$Age)
names(concrete)
install.packages("Hmisc")
library(Hmisc)
newage<-cut2(concrete$Age,g=3)
table(newage)
plot(training$CompressiveStrength,newage)
plot(training$CompressiveStrength,col = newage)
library(ggplot2)
g<-ggplot(data = concrete,aes(x=CompressiveStrength,color = newage))
g<-g+geom_point()
g
g<-ggplot(data = concrete,aes(x=CompressiveStrength,y=NULL,color = newage))
g<-g+geom_point()
g
plot(training$CompressiveStrength,col = newage)
g<-ggplot(data = concrete,aes(y=CompressiveStrength,color = newage))
g<-g+geom_point()
g
g<-ggplot(data = concrete,aes(y=CompressiveStrength,x = seq(1, length(concrete$CompressiveStrength)),color = newage))
g<-g+geom_point()
g
newFlyAsh<-cut2(concrete$FlyAsh,g=3)
g<-ggplot(data = concrete,aes(y=CompressiveStrength,x = seq(1, length(concrete$CompressiveStrength)),color = newFlyAsh))
g<-g+geom_point()
g
g<-ggplot(data = concrete,aes(y=CompressiveStrength,x = seq(1, length(concrete$CompressiveStrength)),color = newage))
g<-g+geom_point()
g
g<-ggplot(data = concrete,aes(y=CompressiveStrength,x = seq(1, length(concrete$CompressiveStrength)),color = newFlyAsh))
g<-g+geom_point()
g
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(concrete$Superplasticizer)
logsuper<-log10(concrete$Superplasticizer)
hist(logsuper)
hist(concrete$Superplasticizer)
range(concrete$Superplasticizer)
logsuper<-log10(concrete$Superplasticizer)+1
hist(logsuper)
qqnorm(logsuper)
hist(logsuper)
qqnorm(logsuper)
qqnorm(concrete$Superplasticizer)
logsuper<-log10(concrete$Superplasticizer)+1
hist(logsuper)
hist(concrete$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
adData = data.frame(diagnosis,predictors)
training = adData[ inTrain,]
testing = adData[-inTrain,]
grepl("^IL",names(inTrain))
names(inTrain)
grepl("^IL",names(training))
grep("^IL",names(training))
grep("^IL",names(training),value = TRUE)
svd1<-svd(scale(training[,c(58,59,60,61,62,63,64,65,66,67,68,69)]))
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
precmp<-prcomp(log10(training[,c(58,59,60,61,62,63,64,65,66,67,68,69)])+1)
precmp<-prcomp(training[,c(58,59,60,61,62,63,64,65,66,67,68,69)])
precmp
prcomp$x
precmp$scale
precmp$sdev
plot(precmp$sdev^2/sum(precmp$sdev^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
abline(x=0,y=.5)
abline(a=0,b=.5)
abline(a=0,b=0.5,lwd="")
abline(a=0,b=0.5,lwd=2)
abline(a=0.5,lwd=2)
model1<-train(training$diagnosis ~ precmp$x[,1:4],method = "glm")
model1<-train(training$diagnosis ~ precmp$x[,1] + precmp$x[,2] + precmp$x[,3] + precmp$x[,3],method = "glm")
model1<-train(training$diagnosis ~ precmp$x[,1] + precmp$x[,2] + precmp$x[,3] + precmp$x[,3],method = "glm",data = training)
model2<-train(training$diagnosis ~ training[,c(58,59,60,61,62,63,64,65,66,67,68,69)],method = "glm",data = training)
model1<-train(training$diagnosis ~ precmp$x[,1] + precmp$x[,2] + precmp$x[,3],method = "glm",data = training)
model2<-train(training$diagnosis ~ training[,c(58)]+training[,c(59)]+training[,c(60)]+training[,c(61)]+training[,c(62)]+training[,c(63)]+training[,c(64)]+training[,c(65)]+training[,c(66)]+training[,c(67)]+training[,c(68)]+training[,c(69)],method = "glm",data = training)
model1
model2
model1
model2
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation
library(ISLR)
data("Wage")
library(ggplot2)
names(Wage)
g<-ggplot(data = Wage,aes(x=age,y=wage))
g+geom_point()
g<-ggplot(data = Wage,aes(x=year,y=wage))
g+geom_point()
g+geom+boxplot()
g<-ggplot(data = Wage,aes(x=year,y=wage))
g+geom_boxplot()
g<-ggplot(data = Wage,aes(x=as.factor(year),y=wage))
g+geom_boxplot()
g<-ggplot(data = Wage,aes(x=as.factor(year),y=wage,fill="blue"))
g+geom_boxplot()
g<-ggplot(data = Wage,aes(x=as.factor(year),y=wage,fill=year))
g+geom_boxplot()
g<-ggplot(data = Wage,aes(x=as.factor(education),y=wage,fill=year))
g+geom_boxplot()
library(ISLR)
library(ggplot2)
library(MASS)
data("Boston")
names(Boston)
modelfit<-lm(medv~lstat,data =Boston)
modelfit
summary(modelfit)
plot(modelfit)
hatvalues(modelfit)
which.max(hatvalues(modelfit))
x<-rnorm(50,mean = 10,sd=2.12)
y<-rnorm(21,mean = 5,sd=3.10)
z<-rnorm(67,mean = 18,sd=1.10)
contour (x,y,z)
contour(x,y,z)
image(x,y,z)
y<-x+rnorm(21,mean = 5,sd=3.10)
y<-x+rnorm(21,mean = 5,sd=3.10)
y<-x + rnorm(21,mean = 5,sd=3.10)
x<-rnorm(50,mean = 10,sd=2.12)
y<-x + rnorm(21,mean = 5,sd=3.10)
z<-rnorm(67,mean = 18,sd=1.10)
image(x,y,z)
library(devtools)
?devtools
library(ISLR)
names(Smarket)
head(Smarket)
cor(Smarket[,-9])
library(ggplot2)
g<-ggplot(data = Smarket,aes(x=seq(1:length(Smarket$Volume)),y=Volume))
g+geom_point()
model1<-glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data = Smarket,
family = binomial)
summary(model1)
grep("^Lag",names(Smarket))
grep("^Lag",names(Smarket),1)
grep("^Lag",names(Smarket),value = T)
model1<-glm(Direction~Smarket[,2:6],
data = Smarket,
family = binomial)
model1<-glm(Direction~Smarket[,2],
data = Smarket,
family = binomial)
model1<-glm(Direction~Smarket[,2:6],
data = Smarket,
family = binomial)
Smarket[,2:6]
model1<-glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data = Smarket,
family = binomial)
summary(model1)
pred<-predict(model1,type = "response")
pred[1:10]
pred
finalpred[pred>.5]<-"Up"
finalpred<-"down"
if (pred>.5) finalpred<-"Up"
length(pred)
finalpred[1:length(pred)]<-"down"
if (pred>.5) finalpred<-"Up"
finalpred[1:length(pred)]<-"down"
finalpred
finalpred[pred>.5]<-"Up"
table(finalpred)
table(finalpred,Smarket$Direction)
mean(finalpred == Smarket$Direction)
(507+145)/1250
library(caret)
model2<-train(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data = Smarket)
model2
confusionMatrix(model2,Smarket$Direction)
confusionMatrix(Smarket$Direction,model2)
summary(model2)
model2$results
finalpred[1:length(pred)]<-"Down"
finalpred[pred>.5]<-"Up"
table(finalpred,Smarket$Direction)
mean(finalpred == Smarket$Direction)
lda()
?lda()
nrow(Smarket)
rbinom
?
rbinom
rbinom(nrow(Smarket),0:1,0.7)
mtr<-rbinom(nrow(Smarket),0:1,0.7)
table(mtr)
tr<-Smarket[mtr==1,]
lda(Direction~Lag1+Lag2,data = )
ldamod<-lda(Direction~Lag1+Lag2,data = tr)
library(MASS)
ldamod<-lda(Direction~Lag1+Lag2,data = tr)
ldamod
ff<-predict(ldamod,type = "response")
ff
finalpredlda[1:length(ff)]<-"Down"
finalpredlda[1:length(ff)]<-"Down"
finalpredlda
finalpredlda<-rep(length(ff),"Down")
finalpredlda<-rep("Down",length(ff))
rm(finalpredlda)
finalpredlda<-rep("Down",length(ff))
finalpredlda[ff>.5]<-"Up"
finalpredlda[ff>.5]<-"Up"
ff
tr$ff<-predict(ldamod,type = "response")
tr$new[tr$ff > 0.5]<-"Up"
tr$new
str(tr$ff)
tr$ff
ff
rm(tr)
mtr<-rbinom(nrow(Smarket),0:1,0.7)
tr<-Smarket[mtr==1,]
ldamod<-lda(Direction~Lag1+Lag2,data = tr)
ff<-predict(ldamod,type = "response")
length(ff)
ff
ff$class
table(ff$class,tr$Direction)
mean(ff$class == tr$Direction)
ts<-Smarket[mtr!=1,]
ff1<-predict(ldamod,data = ts,type = "response")
table(ff1$class,ts$Direction)
ff1$class
dim(ff1)
length(ff1$class)
length(ts)
dim(ts)
ts
table(ts$Direction)
table(ff1$class)
new1<-predict(ldamod,ts,type = "response")
table(new1$class)
table(new1$class,ts$Direction)
mean(new1$class == ts$Direction)
plot(ldamod)
plot(ldamod)
plot(ldamod)
plot(ldamod)
qdamod<-qda(Direction~Lag1+Lag2,data = tr)
ffqda<-predict(ldamod,type = "response")
ffqda<-predict(qdamod,type = "response")
new1qda<-predict(qdamod,ts,type = "response")
mean(new1qda$class == ts$Direction)
mean(ffqda$class == tr$Direction)
methods(mean)
methods(predict)
methods(show)
methods(lm)
methods(lm)
lm()
?lm
methods(lm)
methods(colSums)
methods(colSums())
methods(colSums
)
methods(dgamma
)
install.packages( DDPQuiz3)
install.packages("DDPQuiz3")
library(DDPQuiz3)
Activity<-read.csv("pml-training.csv",header = T)
setwd("G:/Coursera/Course 8 - Machine Learning/Courser Project")
Activity<-read.csv("pml-training.csv",header = T)
head(Activity)
names(Activity)
colSums(Activity)
Activity$X
str(Activity)
grep("gyros",names(Activity))
grep("gyros",names(Activity),value = T)
i
head(Activity(,grep("gyros",names(Activity),value = T)))
head(Activity(,grep("gyros",names(Activity))))
Activity(,grep("gyros",names(Activity)))
Activity[,grep("gyros",names(Activity))]
colSums()
colSums(Activity[,grep("gyros",names(Activity))])
is.na(colSums(Activity[,grep("gyros",names(Activity))]))
!is.na(colSums(Activity[,grep("gyros",names(Activity))]))
!is.na(colSums(Activity[,grep("roll",names(Activity))]))
grep("roll",names(Activity))
colSums(Activity[,])
colSums(Activity)
!is.na(colSums(Activity[,grep("gyros",names(Activity))]))
!is.na(colSums(Activity[,grep("accel",names(Activity))]))
!is.na(colSums(Activity[,grep("magnet",names(Activity))]))
names(Activity)
!is.na(colSums(Activity[,grep("roll",names(Activity))]))
!is.na(colSums(Activity[,grep("^roll",names(Activity))]))
!is.na(colSums(Activity[,grep("^gyros",names(Activity))]))
!is.na(colSums(Activity[,grep("^accel",names(Activity))]))
!is.na(colSums(Activity[,grep("^magnet",names(Activity))]))
!is.na(colSums(Activity[,grep("^roll",names(Activity))]))
!is.na(colSums(Activity[,grep("^pitch",names(Activity))]))
!is.na(colSums(Activity[,grep("^yaw",names(Activity))]))
!is.na(colSums(Activity[,grep("^gyros",names(Activity))]))
!is.na(colSums(Activity[,grep("^accel",names(Activity))]))
!is.na(colSums(Activity[,grep("^magnet",names(Activity))]))
!is.na(colSums(Activity[,grep("^roll",names(Activity))]))
!is.na(colSums(Activity[,grep("^pitch",names(Activity))]))
!is.na(colSums(Activity[,grep("^yaw",names(Activity))]))
Activity[,grep("^gyros",names(Activity))
)
Activity[,grep("^gyros",names(Activity))]
grep("^gyros",names(Activity))
grep("((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(Activity))
grep("((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(Activity),value = T)
grep("^((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(Activity),value = T)
grep("^((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(Activity))
selcols<-grep("^((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(Activity))
Activity_F<-Activity[,selcols]
Activity_F
Activity_F$classe<-Activity$classe
tabel(Activity_F$classe)
tablw(Activity_F$classe)
table(Activity_F$classe)
dim(Activity_F)
clust<-kmeans(Activity_F[,-58],5)
dim(Activity_F)
clust<-kmeans(Activity_F[,-49],5)
clust$cluster
table(clust$cluster,Activity_F$classe)
library(caret)
train<-createDataPartition(Activity_F$classe,p=0.7,list = F)
table(train)
sum(train)
nrow(train)
nrow(Activity_F)
nrow(Activity_F)*70/100
Activity_train<-Activity_F[train,]
Activity_test<-Activity_F[-train,]
library(tree)
tree.ac<-tree(classe~.,data = Activity_train)
summary(tree.ac)
tree.pred<-predict(tree.ac,newdata = Activity_test,type = "class")
tree.pred
table(tree.pred,Activity_test$classe)
((1423+594+717+700+497)/nrow(Activity_test))*100
cv.ac<-cv.tree(tree.ac,FUN = prune.misclass)
cv.ac$size
cv.ac$dev
plot(cv.ac$size,cv.ac$dev)
plot(cv.ac$size,cv.ac$dev,type = "b")
plot(cv.ac$k,cv.ac$dev,type = "b")
prune.ac<-prune.misclass(tree.ac,best = 17)
plot(prune.ac)
text(prune.ac,pretty = 0)
prune.pred<-predict(prune.ac,newdata = Activity_test,type = "class")
table(prune.pred,Activity_test$classe)
table(tree.pred,Activity_test$classe)
prune.ac<-prune.misclass(tree.ac,best = 9)
prune.pred<-predict(prune.ac,newdata = Activity_test,type = "class")
table(prune.pred,Activity_test$classe)
((1219+601+794+475+497)/nrow(Activity_test))*100
table(prune.pred,Activity_test$classe)[1,1]
((table(prune.pred,Activity_test$classe)[1,1]+
table(prune.pred,Activity_test$classe)[2,2]+
table(prune.pred,Activity_test$classe)[3,3]+
table(prune.pred,Activity_test$classe)[4,4]+
table(prune.pred,Activity_test$classe)[5,5])/nrow(Activity_test))*100
prune.ac<-prune.misclass(tree.ac,best = 17)
prune.pred<-predict(prune.ac,newdata = Activity_test,type = "class")
((table(prune.pred,Activity_test$classe)[1,1]+
table(prune.pred,Activity_test$classe)[2,2]+
table(prune.pred,Activity_test$classe)[3,3]+
table(prune.pred,Activity_test$classe)[4,4]+
table(prune.pred,Activity_test$classe)[5,5])/nrow(Activity_test))*100
prune.ac<-prune.misclass(tree.ac,best = 19)
prune.ac<-prune.misclass(tree.ac,best = 18)
prune.ac<-prune.misclass(tree.ac,best = 17)
prune.pred<-predict(prune.ac,newdata = Activity_test,type = "class")
((table(prune.pred,Activity_test$classe)[1,1]+
table(prune.pred,Activity_test$classe)[2,2]+
table(prune.pred,Activity_test$classe)[3,3]+
table(prune.pred,Activity_test$classe)[4,4]+
table(prune.pred,Activity_test$classe)[5,5])/nrow(Activity_test))*100
library(randomForest)
forest.ac<-randomForest(classe~.,data = Activity_train,importance = T)
forest.pred<-predict(forest.ac,newdata = Activity_test,type = "class")
((table(forest.pred,Activity_test$classe)[1,1]+
table(forest.pred,Activity_test$classe)[2,2]+
table(forest.pred,Activity_test$classe)[3,3]+
table(forest.pred,Activity_test$classe)[4,4]+
table(forest.pred,Activity_test$classe)[5,5])/nrow(Activity_test))*100
table(forest.pred,Activity_test$classe)
summaryforest.pred
summary(forest.pred)
summary(forest.ac)
forest.ac
100 - (((table(forest.pred,Activity_test$classe)[1,1]+
table(forest.pred,Activity_test$classe)[2,2]+
table(forest.pred,Activity_test$classe)[3,3]+
table(forest.pred,Activity_test$classe)[4,4]+
table(forest.pred,Activity_test$classe)[5,5])/nrow(Activity_test))*100)
importance(forest.ac)
importance(forest.ac)
plot(forest.ac)
forest.ac
summary(forest.ac)
forest.ac$votes
forest.ac$oob.times
final_test<-read.csv("pml-testing.csv",header = T)
grep("^((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(final_test))
selcol1s<-grep("^((gyros)|(accel)|(magnet)|(roll)|(pitch)|(yaw))",names(final_test))
final_test1<-Activity[,selcol1s]
final_test1
dim(final_test1)
dim(Activity_test)
rm(final_test1)
final_test1<-final_test[,selcol1s]
dim(final_test1)
final.pred<-predict(forest.ac,newdata = final_test1,type = "class")
final.pred
forest.ac$oob.times
plot(forest.ac$oob.times)
plot(forest.ac$test)
forest.ac$test
ntree
randomForest
?randomForest
varImpPlot(forest.ac)
activity.cv<-rfcv(Activity_train[,-49],Activity_train[,49])
activity.cv$error.cv
forest.ac
summary(forest.ac)
summary(forest.ac)
forest.ac
activity.cv$error.cv
activity.cv$n.var
plot(activity.cv$n.var,activity.cv$error.cv)
final_test1
final.pred
rm(list = ls())
plot(activity.cv$n.var,activity.cv$error.cv)
?randomForest
varImpPlot(forest.ac,sort = TRUE)
Activity_train[,rownames(top6)[1:6]]
final<-randomForest(classe~.,data = Activity_train6)
forest.pred1
